reset;

# Fixed hyperparameters
param nu := 50; 

# Load model and data
model "models/dual_SVM.mod";
data "data/generated/GEN_train_AMPL.dat";
option solver cplex;
option cplex_options 'timing=1';

# Parameters for accuracy
param train_correct;
param test_correct;
param y_pred;

# Load test data and parameters
param n_test;
param m_test;
param A_test {0..m_test, 1..n_test};
param y_test {0..m_test};
data "data/generated/GEN_test_AMPL.dat";

# Primal retrieval parameters
param gamma;
param w {j in 1..n_train};

# SOLVE
show;
expand;
solve;


# WEIGHTS
for {j in 1..n_train} {
	let w[j] := sum {i in 1..m_train} la[i] * A_train[i,j] * y_train[i];
}
display w;

# GAMMA 
for {i in 1..m_train} {
    if la[i] > 0.00001 and la[i] < nu - 0.00001 then {
        let gamma := 1/y_train[i] - sum {j in 1..n_train} w[j] *  A_train[i,j];
        break;
	}
}
display gamma;

# TRAIN ACCURACY
let train_correct := 0;
for { j in 1..m_train} {
    let y_pred := if sum {k in 1..n_train} w[k]*A_train[j,k] + gamma > 0 then 1 else -1;
    if y_pred = y_train[j] then
        let train_correct := train_correct + 1;
}

# TEST ACCURACY
let test_correct := 0;
    for { j in 1..m_test} {
    let y_pred := if sum {k in 1..n_test} w[k]*A_test[j,k] + gamma > 0 then 1 else -1;
    if y_pred = y_test[j] then
        let test_correct := test_correct + 1;
}

display la;
display train_correct/m_train;
display test_correct/m_test;