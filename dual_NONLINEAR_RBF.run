reset;

# Fixed hyperparameters
param nu := 50; 

# Load model and data
model "models/dual_RBF_SVM.mod";
data "data/nonlinear/NONLINEAR_train_AMPL.dat";
option solver cplex;
option cplex_options 'timing=1';

# Parameters for accuracy
param train_correct;
param test_correct;
param y_pred;
param sv;

# Load test data and parameters
param n_test;
param m_test;
param A_test {0..m_test, 1..n_test};
param y_test {0..m_test};
data "data/nonlinear/NONLINEAR_test_AMPL.dat";




# SOLVE
show;
expand;
solve;


param K_test {i in 1..m_test, j in 1..m_test} = exp(-sum{k in 1..n_train} (A_test[i, k] - A_test[j, k])^2 / (2 * sigma^2)); 

# SUPPORT VECTOR
for {i in 1..m_train} {
    if la[i] > 0.00001 and la[i] < nu - 0.00001 then {
        let sv := i;
        break;
	}
}


# TRAIN ACCURACY
let train_correct := 0;
for { k in 1..m_train} {
    if sum {i in 1..m_train} la[i] * y_train[i] *  exp(-sum{j in 1..n_train} (A_train[i, j] - A_train[i, j])^2 / (2 * sigma^2)) + 1/y_train[sv] -  sum {i in 1..m_train} la[i] * exp(-sum{j in 1..n_train} (A_train[i, j] - A_train[sv, j])^2 / (2 * sigma^2))  > 0 then
        let y_pred := 1;
    else
        let y_pred := -1;
        
    if y_pred = y_train[k] then
        let train_correct := train_correct + 1;
}

# # TEST ACCURACY
# let test_correct := 0;
#     for { j in 1..m_test} {
#     let y_pred := if sum {k in 1..n_test} w[k]*A_test[j,k] + gamma > 0 then 1 else -1;
#     if y_pred = y_test[j] then
#         let test_correct := test_correct + 1;
# }

display la;
display train_correct/m_train;
# display test_correct/m_test;